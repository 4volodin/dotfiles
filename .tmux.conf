source-file "~/.tmux/themes/github_light.conf"

set -g pane-border-lines heavy
set -g pane-active-border-style "fg=#ff0000"

#######################
# ***    PLUGINS   *** #
# Press <prefix> + I (capital I) to fetch the plugin.
# Press <prefix> + U to update existing plugins
# Press <prefix> + alt + u to remove/uninstall plugins not on the plugin list
########################
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

set -g @plugin 'christoomey/vim-tmux-navigator'

# Resurrect, see https://github.com/tmux-plugins/tmux-resurrect
# plugins for save sessions  CTRL-s (safe) / CTRL-r (restore)
set -g @plugin 'tmux-plugins/tmux-resurrect'

# tmux-continuum, see https://github.com/tmux-plugins/tmux-continuum
# saves/restores state automatically every 15min interval and auto restored when tmux is started (after reboot)
set -g @plugin 'tmux-plugins/tmux-continuum'

# Restore vim neovim sessions
set -g @resurrect-strategy-vim 'session' # for vim
set -g @resurrect-strategy-nvim 'session'   # for neovim
# Restore last saved environment (automatically)
set -g @continuum-restore 'on'
set -g @continuum-save-interval '1'
set -g @resurrect-capture-pane-contents 'on'
#set -g status-right 'Continuum status: #{continuum_status}'

set -g @plugin 'tmux-plugins/tmux-prefix-highlight'

unbind C-b
set -g prefix C-s
bind-key -r C-s send-prefix

bind-key R source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

set -g history-limit 250000                 # boost history
set -g mouse on
set-option -sg escape-time 0
set -g focus-events on

# If you have many tmux windows opened, you might want to get notified when something happens inside other windows.
#setw -g monitor-activity on
#set -g visual-activity on

set -g status-position top

########################
# DISPLAY
########################
# https://jdhao.github.io/2018/10/19
#set -g default-terminal "screen-256color"

#set -g default-terminal "tmux-256color"
set -g default-terminal "xterm-256color"
set -ag terminal-overrides ",xterm-256color:RGB"

# !!!!!!! Set cursor if it doesn't work may be you should try it ???
# When you use tmux, it is important to use it like that (without the \<Esc>Ptmux; escape). tmux will keep track of the correct cursor shape when you switch windows/panes. https://stackoverflow.com/questions/6488683/how-to-change-the-cursor-between-normal-and-insert-modes-in-vim
# set -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

#  to see tmux window titles as tab/window titles in iTerm2
set -g set-titles on          # set terminal title
set-option -g set-titles-string '#T'

set-option -g base-index 1                  # start windows numbering at 1
set-option -g renumber-windows on           # renumber windows when a window is closed
bind-key b break-pane -d

########################

bind C-c new-session
bind c new-window -c '#{pane_current_path}'

bind -n M-l next-window
bind -n M-h previous-window

bind C-l display-popup -d '#{pane_current_path}' -E lf
bind C-g display-popup -d '#{pane_current_path}' -E gitui

# switch sessions


##add backslash at the end#    tmux list-sessions -F '#{?session_attached,,#{session_name}}' |
##add backslash at the end#     bind -n M-s display-popup -E "
bind C-j display-popup -E "\
    tmux list-sessions  -F '#{session_name}' |\
    sed '/^$/d' |\
    fzf --reverse --header jump-to-session --preview 'tmux capture-pane -pt {}'  |\
    xargs tmux switch-client -t"

bind-key -n M-0 last-window

#bind-key C-m display-menu -x W -y S
bind -n M-m display-menu -x W -y S \
    "New Session"                        S "command-prompt -p \"New Session:\" \"new-session -A -s '%%'\"" \
    "Kill Session"                       x "kill-session" \
    "Kill Other Session(s)"              X "kill-session -a" \
    "" \
    "New Window"                         ‚êç new-window \
    "Kill Window"                        k "killw"  \
    "Choose Window"                      w choose-window \
    "Previous Window"                    ü°† previous-window \
    "Next Window"                        ü°¢ next-window \
    "Swap Window Right"                  ‚Üë "swap-window -t -1" \
    "Swap Window Left"                   ‚Üì "swap-window -t +1" \
    "Horizontal Split"                   v "split-window -h" \
    "Vertical Split"                     s "split-window -v"  \
    "" \
    "Layout Horizontal"                  h "select-layout even-horizontal"  \
    "Layout Vertical"                    k "select-layout even-horizontal"  \
    "" \
    "Swap Pane Up"                       < "swap-pane -U" \
    "Swap Pane Down"                     > "swap-pane -D" \
    "Break Pane"                         t break-pane \
    "Join Pane"                          j "choose-window 'join-pane -h -s \"%%\"'" \
    "#{?window_zoomed_flag,Unzoom,Zoom}" z "resize-pane -Z"

########################
# Movement Left, Right, Up, Down
########################
# Map vim movement keys as pane movement keys with prefix
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
#Thanks to Christopher Sexton who provided the updated tmux configuration in this blog post http://www.codeography.com/2013/06/19/navigating-vim-and-tmux-splits.
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
########################

# pane movement
bind-key f command-prompt -p "join pane from:"  "join-pane -s '%%'"
bind-key t command-prompt -p "send pane to:"  "join-pane -t '%%'"
bind-key S choose-window 'join-pane -v -s "%%"'
bind-key V choose-window 'join-pane -h -s "%%"'

########################
# Split, swap and Resize
########################
bind v split-window -h
bind s split-window -v

bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# maximize current pane
bind -r z resize-pane -Z
bind -n M-z resize-pane -Z

# pane resizing
bind -r H resize-pane -L 4
bind -r J resize-pane -D 4
bind -r K resize-pane -U 4
bind -r L resize-pane -R 4
########################
# it's need to HOME,END in tmux
bind-key -n Home send Escape "OH"
bind-key -n End send Escape "OF"

########################
# -- copy mode -----------------------------------------------------------------
########################
# enable escapes, it allows pass OSC52 sequences through ssh, In tmux 3.3 and later
set-option -g allow-passthrough on
set -s set-clipboard on

# Use vim keybindings in copy mode
setw -g mode-keys vi

#bind Enter copy-mode # enter copy mode

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# copy to Mac OSX clipboard,  Make the clipboard available inside the tmux (to be used by VIM)
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'
# buffers
bind b list-buffers  # list paste buffers
bind P choose-buffer # choose which buffer to paste from
########################

# ==============================================
# ===   Nesting local and remote sessions     ===
# ==============================================

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.remote.conf'

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session

# see: toggle on/off all keybindings ¬∑ Issue #237 ¬∑ tmux/tmux - https://github.com/tmux/tmux/issues/237

#Variables
color_status_text="red" #"colour245"
color_window_off_status_bg="yellow" #"colour238"
color_light="white" #colour015
color_dark="colour232" # black= colour232
color_window_off_status_current_bg="colour254"
# Also, change same visual styles when window keys are off
bind -T root F12  \
    set prefix None \;\
    set key-table off \;\
    set status-style "fg=$color_status_text,bold,bg=$color_window_off_status_bg" \;\
    set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
      refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u window-status-current-style \;\
  set -u window-status-current-format \;\
  refresh-client -S
# =============================================================

# Initialize TMUX plugin manager. Run all plugins' scripts
run '~/.tmux/plugins/tpm/tpm'

