source-file "~/.tmux/themes/github_light.tmux"

#######################
# ***    PLUGINS   *** #
# Press <prefix> + I (capital I) to fetch the plugin.
# Press <prefix> + U to update existing plugins
# Press <prefix> + alt + u to remove/uninstall plugins not on the plugin list
########################
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

set -g @plugin 'christoomey/vim-tmux-navigator'

# Resurrect, see https://github.com/tmux-plugins/tmux-resurrect
# plugins for save sessions  CTRL-s (safe) / CTRL-r (restore)
set -g @plugin 'tmux-plugins/tmux-resurrect'

# tmux-continuum, see https://github.com/tmux-plugins/tmux-continuum
# saves/restores state automatically every 15min interval and auto restored when tmux is started (after reboot)
set -g @plugin 'tmux-plugins/tmux-continuum'

# Restore vim neovim sessions
set -g @resurrect-strategy-vim 'session' # for vim
set -g @resurrect-strategy-nvim 'session'   # for neovim
# Restore last saved environment (automatically)
set -g @continuum-restore 'on'
set -g @continuum-boot 'on'
set -g @continuum-boot-options 'iterm'
set -g @continuum-save-interval '1'
set -g @resurrect-capture-pane-contents 'on'
set -g status-right 'Continuum status: #{continuum_status}'

unbind C-b
set -g prefix C-s
bind-key -r C-s send-prefix

bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

set -g history-limit 250000                 # boost history
set-window-option -g mouse on
set-option -sg escape-time 0
set -g focus-events on

########################
# DISPLAY
########################
# https://jdhao.github.io/2018/10/19
set -g default-terminal "screen-256color"

#  to see tmux window titles as tab/window titles in iTerm2
set -g set-titles on          # set terminal title
set-option -g set-titles-string '#T'

set-option -g base-index 1                  # start windows numbering at 1
set-option -g renumber-windows on           # renumber windows when a window is closed
bind-key b break-pane -d

########################

bind C-c new-session
bind c new-window -c '#{pane_current_path}'

bind - split-window -v  -c '#{pane_current_path}'
bind '\' split-window -h  -c '#{pane_current_path}'

bind -r n next-window
bind -r p previous-window

bind C-j display-popup -E "\
    tmux list-sessions -F '#{?session_attached,,#{session_name}}' |\
    sed '/^$/d' |\
    fzf --reverse --header jump-to-session --preview 'tmux capture-pane -pt {}'  |\
    xargs tmux switch-client -t"

########################
# Movement Left, Right, Up, Down
########################
# Map vim movement keys as pane movement keys with prefix
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
#Thanks to Christopher Sexton who provided the updated tmux configuration in this blog post http://www.codeography.com/2013/06/19/navigating-vim-and-tmux-splits.
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
########################

########################
# Swap and Resize
########################
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# maximize current pane
bind -r z resize-pane -Z

# pane resizing
bind -r H resize-pane -L 4
bind -r J resize-pane -D 4
bind -r K resize-pane -U 4
bind -r L resize-pane -R 4
########################

########################
# -- copy mode -----------------------------------------------------------------
########################
# Use vim keybindings in copy mode
setw -g mode-keys vi

bind Enter copy-mode # enter copy mode

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# copy to Mac OSX clipboard
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'
# buffers
bind b list-buffers  # list paste buffers
bind P choose-buffer # choose which buffer to paste from
########################


# Initialize TMUX plugin manager
run '~/.tmux/plugins/tpm/tpm'

