# cat << EOF > /dev/null
# https://github.com/gpakosz/.tmux
# (‑●‑●)> dual licensed under the WTFPL v2 license and the MIT license,
#         without any warranty.
#         Copyright 2012— Gregory Pakosz (@gpakosz).
# /!\ do not edit this file
#     instead, override settings in ~/.tmux.conf.local, see README.md

#set -g focus-events on
source-file "~/.tmux/themes/github_light.tmux"

#######################
# ***    PLUGINS   *** #
# Press <prefix> + I (capital I) to fetch the plugin.
# Press <prefix> + U to update existing plugins
# Press <prefix> + alt + u to remove/uninstall plugins not on the plugin list
########################
set -g @plugin 'christoomey/vim-tmux-navigator'

# Resurrect, see https://github.com/tmux-plugins/tmux-resurrect
#plugins for save sessions save with prefix-Ctrl-s and manually restore with prefix-Ctrl-r if desired.
# Restore sessions trigger + CTRL-s (safe) / CTRL-r (restore)
set -g @plugin 'tmux-plugins/tmux-resurrect'

# tmux-continuum, see https://github.com/tmux-plugins/tmux-continuum
# saves/restores state automatically every 15min interval
set -g @plugin 'tmux-plugins/tmux-continuum'
# your tmux sessions will be automatically saved every 15 min and auto restored when tmux is started (after reboot)

# Restore vim neovim sessions
set -g @resurrect-strategy-vim 'session' # for vim
set -g @resurrect-strategy-nvim 'session'   # for neovim
# Restore last saved environment (automatically)
set -g @continuum-restore 'on'
set -g @continuum-boot 'on'
set -g @continuum-save-interval '1'
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-capture-pane-contents 'on'

########################
# ***    DISPLAY   *** #
########################
# https://jdhao.github.io/2018/10/19
set -g default-terminal "screen-256color"
#set -g default-terminal "tmux-256color"
# tell Tmux that outside terminal supports TrueColor
set -ga terminal-overrides ",xterm-256color:Tc"
# for Kitty terminal
#set-option -sa terminal-overrides ",xterm-kitty:RGB"

#Adding cursorshape support over tmux + ssh
#set -ga terminal-overrides ",screen*:Ss=^[[%p1%d q:Se=^[[2 q"

 ##This switches the cursor into a pipe when in insert mode tmux will only
 ##forward escape sequences to the terminal if surrounded by a DCS sequence
#set -g default-terminal 'tmux-256color' # replace this with your custom term-info name
#set -ga terminal-overrides ',*:Tc' # this is for 256 color
#set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q' # this is for the cursor shape


# -- general -------------------------------------------------------------------
#set-window-option -g mode-keys vi #set for scroll in command line

#set-option -g default-shell /bin/zsh

# use the Ctrl + Arrow Keys to navigate over words
set-window-option -g xterm-keys on
setw -g xterm-keys on

# No delay for escape key press
set-option -sg escape-time 0
#set -sg escape-time 30

#it was delay 10sec
#set -s escape-time 10                     # faster command sequences

#set -sg repeat-time 600                   # increase repeat timeout

## set prefix C-b and C-a at the same time for ssh linux connections
set -g prefix2 C-a                        # GNU-Screen compatible prefix
bind C-a send-prefix -2
## for macos
set -g prefix C-a
unbind-key C-b
bind-key C-a send-prefix

set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on

set -g history-limit 250000                 # boost history

# edit configuration
#bind e new-window -n '~/.tmux.conf.local' "sh -c '\${EDITOR:-vim} ~/.tmux.conf.local && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\"'"

# reload configuration
bind r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'


# -- display -------------------------------------------------------------------

#set -g base-index 1           # start windows numbering at 1
#setw -g pane-base-index 1     # make pane numbering consistent with windows

setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed

#  to see tmux window titles as tab/window titles in iTerm2
set -g set-titles on          # set terminal title
set-option -g set-titles-string '#T'

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

#set -g status-interval 10     # redraw status line every 10 seconds

# clear both screen and history
#bind -n C-l send-keys C-l \; run 'sleep 0.1' \; clear-history

set-window-option -g mouse on

# visual notification of activity in other windows
setw -g monitor-activity on
set -g visual-activity on
# -- navigation ----------------------------------------------------------------

# create session
bind C-c new-session

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# SPLIT
# split current window horizontally
bind s split-window -v
# split current window vertically
bind v split-window -h
#  automatically open new windows and tabs in the directory from where you opened them:
# New window with default path set to last path
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# for vim plugin christoomey/vim-tmux-navigator'
# smart pane switching with awareness of vim splits
# Version 1
#bind -n C-y run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-y) || tmux select-pane -L"
#bind -n C-u run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-u) || tmux select-pane -D"
#bind -n C-i run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-i) || tmux select-pane -U"
#bind -n C-o run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-o) || tmux select-pane -R"

# Version 2
#Thanks to Christopher Sexton who provided the updated tmux configuration in this blog post http://www.codeography.com/2013/06/19/navigating-vim-and-tmux-splits.
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
#bind-key -n C-y if-shell "$is_vim" "send-keys C-y"  "select-pane -L"
#bind-key -n C-u if-shell "$is_vim" "send-keys C-u"  "select-pane -D"
#bind-key -n F8 if-shell "$is_vim" "send-keys F8"  "select-pane -U"
#bind-key -n C-o if-shell "$is_vim" "send-keys C-o"  "select-pane -R"

bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"

# Map vim movement keys as pane movement keys with prefix
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R


#bind-key -T copy-mode-vi C-y select-pane -L
#bind-key -T copy-mode-vi C-u select-pane -D
#bind-key -T copy-mode-vi C-i select-pane -U
#bind-key -T copy-mode-vi C-o select-pane -R

# pane navigation
#bind -r y select-pane -L  # move left
#bind -r u select-pane -D  # move down
#bind -r i select-pane -U  # move up
#bind -r o select-pane -R  # move right
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one
#bind C-y swap-pane -L
#bind C-o swap-pane -R

#bind m set-window-option main-pane-height 30\; select-layout main-horizontal

# bind -n C-y run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-y) || tmux select-pane -L"
# bind -n C-u run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-u) || tmux select-pane -D"
# bind -n C-i run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-i) || tmux select-pane -U"
# bind -n C-o run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-o) || tmux select-pane -R"

# maximize current pane
bind z run 'cut -c3- ~/.tmux.conf | sh -s _maximize_pane "#{session_name}" #D'
#bind -r z resize-pane -Z

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 4


# window navigation
#unbind n
#unbind p
#bind -r l next-window
#bind -r h previous-window
#bind Tab last-window        # move to last active window

# toggle mouse
bind = run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"

# -- urlview -------------------------------------------------------------------
bind U run "cut -c3- ~/.tmux.conf | sh -s _urlview #{pane_id}"

# -- facebook pathpicker -------------------------------------------------------
bind F run "cut -c3- ~/.tmux.conf | sh -s _fpp #{pane_id}"

# -- list choice (tmux < 2.4) --------------------------------------------------

# vi-choice is gone in tmux >= 2.4
run -b 'tmux bind -t vi-choice h tree-collapse 2> /dev/null || true'
run -b 'tmux bind -t vi-choice l tree-expand 2> /dev/null || true'
run -b 'tmux bind -t vi-choice K start-of-list 2> /dev/null || true'
run -b 'tmux bind -t vi-choice J end-of-list 2> /dev/null || true'
run -b 'tmux bind -t vi-choice H tree-collapse-all 2> /dev/null || true'
run -b 'tmux bind -t vi-choice L tree-expand-all 2> /dev/null || true'
run -b 'tmux bind -t vi-choice Escape cancel 2> /dev/null || true'


# -- edit mode (tmux < 2.4) ----------------------------------------------------

# vi-edit is gone in tmux >= 2.4
run -b 'tmux bind -ct vi-edit H start-of-line 2> /dev/null || true'
run -b 'tmux bind -ct vi-edit L end-of-line 2> /dev/null || true'
run -b 'tmux bind -ct vi-edit q cancel 2> /dev/null || true'
run -b 'tmux bind -ct vi-edit Escape cancel 2> /dev/null || true'


# -- copy mode -----------------------------------------------------------------

bind Enter copy-mode # enter copy mode

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# copy to Mac OSX clipboard
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'


# -- buffers -------------------------------------------------------------------

bind b list-buffers  # list paste buffers
#bind p paste-buffer  # paste from the top paste buffer
bind P choose-buffer # choose which buffer to paste from


# -- user defined overrides ----------------------------------------------------

#if '[ -f ~/.tmux.conf.local ]' 'source ~/.tmux.conf.local'


# Auto-hide status bar if pane is maximized
set-hook -g 'after-resize-pane'  'run-shell -b "if [ \#{window_zoomed_flag} -eq 1 ]; then tmux set status off; else tmux set status on; fi"'
set-hook -g 'after-new-window'   'run-shell -b "if [ \#{window_zoomed_flag} -eq 1 ]; then tmux set status off; else tmux set status on; fi"'
set-hook -g 'after-kill-pane'    'run-shell -b "if [ \#{window_zoomed_flag} -eq 1 ]; then tmux set status off; else tmux set status on; fi"'
set-hook -g 'pane-exited'        'run-shell -b "if [ \#{window_zoomed_flag} -eq 1 ]; then tmux set status off; else tmux set status on; fi"'
set-hook -g 'after-split-window' 'run-shell -b "if [ \#{window_zoomed_flag} -gt 1 ]; then tmux set status off; else tmux set status on; fi"'

# Initialize TMUX plugin manager
run '~/.tmux/plugins/tpm/tpm'



# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# export LC_NUMERIC=C
#
# _maximize_pane() {
#   current_session=${1:-$(tmux display -p '#{session_name}')}
#   current_pane=${2:-$(tmux display -p '#{pane_id}')}
#
#   dead_panes=$(tmux list-panes -s -t "$current_session" -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -o '^1 %.\+maximized.\+$' || true)
#   restore=$(echo "$dead_panes" | sed -n -E -e "s/^1 $current_pane .+maximized.+'(%[0-9]+)'$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t $current_pane/p" -e "s/^1 (%[0-9]+) .+maximized.+'$current_pane'$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t \1/p" )
#
#   if [ -z "$restore" ]; then
#     [ "$(tmux list-panes -t "$current_session:" | wc -l | sed 's/^ *//g')" -eq 1 ] && tmux display "Can't maximize with only one pane" && return
#     window=$(tmux new-window -t "$current_session:" -P "exec maximized... 2> /dev/null & tmux setw -t \"$current_session:\" remain-on-exit on; printf \"Pane has been maximized, press <prefix>+ to restore. %s\" '$current_pane'")
#     window=${window%.*}
#
#     retry=10
#     while [ x"$(tmux list-panes -t "$window" -F '#{session_name}:#{window_index} #{pane_dead}' 2>/dev/null)" != x"$window 1" ] && [ "$retry" -ne 0 ]; do
#       sleep 0.05
#       retry=$((retry - 1))
#     done
#     if [ "$retry" -eq 0 ]; then
#       tmux display 'Unable to maximize pane'
#     fi
#
#     new_pane=$(tmux display -t "$window" -p '#{pane_id}')
#     tmux setw -t "$window" remain-on-exit off \; swap-pane -s "$current_pane" -t "$new_pane"
#   else
#     $restore || tmux kill-pane
#   fi
# }
#
# _toggle_mouse() {
#   old=$(tmux show -gv mouse)
#   new=""
#
#   if [ "$old" = "on" ]; then
#     new="off"
#   else
#     new="on"
#   fi
#
#   tmux set -g mouse $new \;\
#        display "mouse: $new"
# }
#
# "$@"
