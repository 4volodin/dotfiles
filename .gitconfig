[init]
	defaultBranch = main
# The trailing slashes below are required to match
# any subdirectory and not just the exact path
[include]  # optional (if you sometimes work outside of your regular directories)
    path = ~/.gitconfig-4volodin
[includeIf "gitdir:~/code/4volodin/"]
    path = .gitconfig-4volodin
[includeIf "gitdir:~/code/4truedev/"]
    path = .gitconfig-4truedev

[alias]
    c = commit
    ca = commit -a
    cm = commit -m
    cam = commit -am
    d = diff
    dc = diff --cached

    # View abbreviated SHA, description, and history graph of the latest 20 commits.
    l = log --graph --decorate -30 --all  --date-order --pretty=format:'%C(cyan)%h%Creset %C(auto)%s%Creset %C(auto)%d'
    ll = log --graph --decorate -30 --all --date-order --pretty=format:'%C(cyan)%h%Creset %C(auto)%s%Creset %C(auto)%d'
    la = log --graph --decorate -30 --all --date-order --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%C(cyan)%h%Creset %C(black)%ad%Creset %C(auto, bold)%s%Creset %C(blue)<%an>%Creset %C(auto)%d'
    #  lg = log --color --graph --date=format:'%Y-%m-%d %H:%M:%S'  --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --branches
    refl = log --reflog --graph --decorate -30 --all --date-order --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%C(cyan)%h%Creset %C(black bold)%ad%Creset%C(auto)%d %s %C(bold blue)<%an>%Creset'

    # View the current working tree status using the short format.
    s = status -s

    # Show the diff between the latest commit and the current state.
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state.
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules.
    p = pull --recurse-submodules

    # Clone a repository including all submodules.
    c = clone --recursive

    # Commit all changes.
    ca = !git add -A && git commit -av

    # Switch to a branch, creating it if necessary.
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch --all
    remotes = remote --verbose

    # List aliases.
    aliases = config --get-regexp alias

    # Amend the currently staged files to the latest commit.
    amend = commit --amend --reuse-message=HEAD

    # Credit an author on the latest commit.
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Interactive rebase with the given number of latest commits.
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with main.
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # List contributors with number of commits.
    contributors = shortlog --summary --numbered

    # Show the user email for the current repository.
    whoami = config user.email
    co = checkout

[core]
	# Use custom `.gitignore` and `.gitattributes`.
	excludesfile = /Users/voale/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error.
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS.
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true
    pager = LESS=-R delta --features "$(defaults read -globalDomain AppleInterfaceStyle &> /dev/null && echo dark-mode || echo light-mode)"
	editor = nvim
	ui = true
	autocrlf = input                # https://htmlacademy.ru/blog/articles/konec-stroki

    quotepath = off
[i18n]
    commitencoding = utf-8
    logoutputencoding = utf-8
[help]
	autocorrect = 1                 # Automatically correct and execute mistyped commands.
[apply]
	whitespace = fix               	# Detect whitespace errors when applying a patch.
[log]
	date = short
[branch]
	sort = -committerdate          	# Show most recently changed branches first.

# gpg sign commit && tags
[tag]
    gpgsign = true
[commit]
	gpgsign = true
	template = ~/.gitmessage
[gpg]
    program = /usr/local/MacGPG2/bin/gpg2
[credential]
    helper = osxkeychain

[pull]
	ff = only
[push]
	default = simple               	# https://git-scm.com/docs/git-config#git-config-pushdefault
	followTags = true               # Make `git push` push relevant annotated tags when pushing branches out.

# diff, merge

[diff]
    tool = meld
	renames = copies                # Detect copies as well as renames.
    colorMoved = default
[difftool "meld"]
    cmd = meld "$LOCAL" "$REMOTE"
[diff "bin"]
	textconv = hexdump -v -C        # Use `hexdump` to diff binary files.
[difftool "vimdiff"]
    cmd = cp "$BASE" "$MERGED" && vimdiff "$LOCAL" "$MERGED" "$REMOTE"
[difftool "vscode"]
    cmd = code --wait --diff $LOCAL $REMOTE
[difftool "webstorm"]
    cmd = webstorm diff $LOCAL $REMOTE --wait

[merge]
    tool = meld
    log = true
    conflictstyle = diff3
    # don't create backup *.orig files
    #keepBackup = false
[mergetool "meld"]
    cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"
	trustExitCode = true
[mergetool "vimdiff"]
    cmd = vimdiff "$LOCAL" "$MERGED" "$REMOTE"
[mergetool "code"]
    cmd = code $LOCAL $REMOTE $BASE $MERGED --wait
	trustExitCode = true
[mergetool "webstorm"]
    cmd = /Applications/WebStorm.app/Contents/MacOS/webstorm merge $LOCAL $REMOTE $BASE $MERGED --wait
	trustExitCode = true

# colors
[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto
	status = auto
	branch = auto
	interactive = auto
	diff = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions
[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[interactive]
    diffFilter = delta --color-only
[add.interactive]
    useBuiltin = false
[delta]
    navigate = true                 # Use n and N to move between diff sections.
    line-numbers = true
    #side-by-side = true             # Enables the side-by-side view.
    tabs = 2
[delta "light-mode"]
  light = true
  syntax-theme = GitHub

[delta "dark-mode"]
  light = false
  syntax-theme = Visual Studio Dark+
[difftool "sourcetree"]
	cmd = /opt/homebrew/bin/meld $LOCAL $REMOTE
	path = 
[mergetool "sourcetree"]
	cmd = /opt/homebrew/bin/meld $LOCAL $MERGED $REMOTE
	trustExitCode = true
